plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'idea'
    id 'maven'

    // Adds dependencyUpdates task
    id 'com.github.ben-manes.versions' version '0.36.0'
}

def gradleDependencyVersion = '6.7.1'

wrapper {
    gradleVersion = gradleDependencyVersion
    distributionType = Wrapper.DistributionType.ALL
}

mainClassName = 'not-applicable'

// Specify all of our dependency versions
def awsSdk2Version = '2.15.52'
def jodaTimeVersion = '2.10.6'
def immutablesValueVersion = '2.8.8'

// NOTE: Do not upgrade to 1.2.3 or you will get null pointer exceptions
def pahoVersion = '1.2.5'

def junitVersion = '4.13.1'
def guavaVersion = '30.1-jre'
def vavrVersion = '0.10.3'

group = 'com.awslabs.aws.iot.websockets.Example'

description = """"""

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()

    maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
}

dependencies {
    // Immutables (requires annotation processing for code generation)
    annotationProcessor "org.immutables:value:$immutablesValueVersion"
    annotationProcessor "org.immutables:gson:$immutablesValueVersion"
    implementation "org.immutables:value:$immutablesValueVersion"
    implementation "org.immutables:gson:$immutablesValueVersion"

    implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:$pahoVersion"
    implementation "joda-time:joda-time:$jodaTimeVersion"

    implementation "software.amazon.awssdk:iot:$awsSdk2Version"
    implementation "software.amazon.awssdk:sts:$awsSdk2Version"
    implementation "software.amazon.awssdk:apache-client:$awsSdk2Version"

    api "javax.inject:javax.inject:1"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.google.guava:guava:$guavaVersion"
    testImplementation "io.vavr:vavr:$vavrVersion"
}

// From: https://gist.github.com/matthiasbalke/3c9ecccbea1d460ee4c3fbc5843ede4a
task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
            subProject.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
        }
    }
}

void resolveConfiguration(configuration) {
    if (isResolveableConfiguration(configuration)) {
        configuration.resolve()
    }
}

boolean isResolveableConfiguration(configuration) {
    def nonResolveableConfigurations = ['apiElements', 'implementation',
                                        'runtimeElements', 'runtimeOnly',
                                        'testImplementation', 'testRuntimeOnly',
                                        'generatedImplementation', 'generatedRuntimeOnly']

    if (nonResolveableConfigurations.contains(configuration.getName())) {
        return false
    }
    return true
}
